{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Harbor Provider \u00b6 Summary of what the provider is for, including use cases and links to app/service documentation. Example Usage \u00b6 # example for harbor v2 api usage provider \"harborv2\" { host = \"demo.goharbor.io\" schema = \"https\" insecure = true basepath = \"/api/v2\" username = \"admin\" password = \"Harbor12345\" } # example for harbor v1 api usage provider \"harborv1\" { host = var.harbor_endpoint schema = \"https\" insecure = true basepath = var.harbor_base_path username = \"admin\" password = \"Harbor12345\" } Argument Reference \u00b6 In addition to generic provider arguments (e.g. alias and version ), the following arguments are supported in the Harbor provider block: host - (Required) Hostname from the Harbor Service. like demo.goharbor.io , can also be specified with the HARBOR_ENDPOINT environment variable. username - (Required) Username for authorize at the harbor, can also be specified with the HARBOR_USERNAME environment variable. password - (Required) Password from given user, can also be specified with the HARBOR_PASSWORD environment variable. schema - (Optional) Set Used http Schema, possible values are: https,http . Default: https insecure - (Optional) Verify Https Certificates. Default: false , can also be specified with the HARBOR_INSECURE environment variable. basepath - (Optional) The Harbor Api basepath, for example use /api for default HarborV1 and /api/v2.0 for Harbor V2 Deployments. Default: /api , can also be specified with the HARBOR_BASEPATH environment variable. Install the Custom Provider \u00b6 Download the Latest Release, . # for example https://github.com/nolte/terraform-provider-harbor/releases/download/release/v0.1.0/terraform-provider-harbor_v0.1.0_linux_amd64.tar.gz LATEST_LINUX_RELEASE = $( curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.assets[].browser_download_url' | grep '_linux_amd64' ) TAG_NAME = $( curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.tag_name' ) # direct install to your personal plugin directory wget -q $LATEST_LINUX_RELEASE -o /tmp/terraform-provider-harbor.zip \\ && unzip -j \"/tmp/terraform-provider-harbor.zip\" \"terraform-provider-harbor_ ${ TAG_NAME } \" -d /home/ ${ USERNAME } /.terraform.d/plugins/linux_amd64 \\ && rm /tmp/terraform-provider-harbor.zip Here a link to the Terraform Doc how to install third-party-plugins","title":"Getting Started"},{"location":"#harbor-provider","text":"Summary of what the provider is for, including use cases and links to app/service documentation.","title":"Harbor Provider"},{"location":"#example-usage","text":"# example for harbor v2 api usage provider \"harborv2\" { host = \"demo.goharbor.io\" schema = \"https\" insecure = true basepath = \"/api/v2\" username = \"admin\" password = \"Harbor12345\" } # example for harbor v1 api usage provider \"harborv1\" { host = var.harbor_endpoint schema = \"https\" insecure = true basepath = var.harbor_base_path username = \"admin\" password = \"Harbor12345\" }","title":"Example Usage"},{"location":"#argument-reference","text":"In addition to generic provider arguments (e.g. alias and version ), the following arguments are supported in the Harbor provider block: host - (Required) Hostname from the Harbor Service. like demo.goharbor.io , can also be specified with the HARBOR_ENDPOINT environment variable. username - (Required) Username for authorize at the harbor, can also be specified with the HARBOR_USERNAME environment variable. password - (Required) Password from given user, can also be specified with the HARBOR_PASSWORD environment variable. schema - (Optional) Set Used http Schema, possible values are: https,http . Default: https insecure - (Optional) Verify Https Certificates. Default: false , can also be specified with the HARBOR_INSECURE environment variable. basepath - (Optional) The Harbor Api basepath, for example use /api for default HarborV1 and /api/v2.0 for Harbor V2 Deployments. Default: /api , can also be specified with the HARBOR_BASEPATH environment variable.","title":"Argument Reference"},{"location":"#install-the-custom-provider","text":"Download the Latest Release, . # for example https://github.com/nolte/terraform-provider-harbor/releases/download/release/v0.1.0/terraform-provider-harbor_v0.1.0_linux_amd64.tar.gz LATEST_LINUX_RELEASE = $( curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.assets[].browser_download_url' | grep '_linux_amd64' ) TAG_NAME = $( curl -sL https://api.github.com/repos/nolte/terraform-provider-harbor/releases/latest | jq -r '.tag_name' ) # direct install to your personal plugin directory wget -q $LATEST_LINUX_RELEASE -o /tmp/terraform-provider-harbor.zip \\ && unzip -j \"/tmp/terraform-provider-harbor.zip\" \"terraform-provider-harbor_ ${ TAG_NAME } \" -d /home/ ${ USERNAME } /.terraform.d/plugins/linux_amd64 \\ && rm /tmp/terraform-provider-harbor.zip Here a link to the Terraform Doc how to install third-party-plugins","title":"Install the Custom Provider"},{"location":"guides/development/","text":"Development \u00b6 Visual Studio Code DevContainer \u00b6 For Easy development use Visual Studio Code DevContainer , you can find the basement from the Development Containers at nolte/vscode-devcontainers . Precondition for Use \u00b6 Create you Github Personal Access Token under github.com/settings/tokens with the following scopes: read:packages Login to fetch the required dev containers docker login docker.pkg.github.com Grab you a Coffee and wait for 3 Minutes (This happens on the first time use) Click Terminal -> New Terminal and execute the following command: make Process \u00b6 branch description master The master will only used for Presentation, and the Deployment process. tags/v* All Created Releases must be start with a v* prefix at the tag name. gh-pages Branch for the Static HTML presentation, generated by the GitHub Release Workflow. develop Branch for the current development, this branch will be used for integrate new Features, and starting the release flow. feature/* This are temporary branches for develop new functions. fix/* Used for bugfixing from existing versions, if no FastForward Fix Possible. Please use the develop branch for new features and fixes. Releasing \u00b6 The Github Release Assets will be automatic attach from the build job see .github/workflows/gorelease.yaml . The Release Process use goreleaser for create the the Binaries. Each Release will be start, at the moment , from the develop branch. The release description will be generated by release-drafter/release-drafter in a seperated workflow. Look to .github/workflows/release-drafter.yml for the Job, and .github/release-drafter.yml for the description configuration. Build \u00b6 The Build scripted at the moment splitted into the GitHub Workflow Stuff and a combination of Makefiles and Shell Scripts, an Targets from the nolte/plumbing . The Makefile/Magefile should be use for the local development, permanten using the full GitHub Workflows needs a lot of time. You will get the compleat list of possible Magefile Targets with: cd ./tools && go run mage.go -l CI/CD \u00b6 For local usage the GitHub Actions we use the nektos/act Project. The first local execute will be take some time for pulling the large nektos/act-environments-ubuntu:18.04 image. Workflow Job Job Local Description build \ud83d\udc4d This is the Classic Build job with Static Tests, and compile the provider. releaseBuild \ud83d\udc4e This Job are used for attatch Release Assets to a existing GHRelease acc \ud83d\udc4e Starting a full run of Terraform Integration Tests, with starting a local kind cluster and deploy a v2 Harbor. shellcheck-check \ud83d\udc4d Check the Schell scripts for problems. devcontainers-check , docscontainers-check \ud83d\udc4e Simple build job for the both Dev Containers (VSCode and mkdocs) # call job act -j <job> -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 # example calling the build workflow act -j build -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 Since the Acception Tests Workflow is a matrix build, for better Tests again different Harbor Versions. It is not possible to run it locally, because the you can`t start two or more Kind Cluster out of the box locally. Feature Request #114 for call a specific Matrix Workflow. HarborAPI Client \u00b6 At the moment the Swagger Json for generate the Api Client, look ./docs/adr/0001-use-swagger-for-generate-http-client.md . For manipulate the Swagger Json, and generating a useable go api client, we use evanphx/json-patch inside the buildprocess, for adding or replace different JSonStructures. So if you need new manipulations, change the scripts/swagger-specs/patch.1.json patch file. More informations about jsonpatch . The problem are tracked, #12474 . Docs \u00b6 The Documentation are presented in Different Formats, as GitHub Page , and for the registry.terraform.io . GitHub Page \u00b6 If you use the VSCode DevContainer , the mkdocs container will be started automatical, as a sidecar container. At the Development you ca access the current state from the Documentation at 127.0.0.1:8000 . For some extras, like Tasks List or Snippeds we use the MarkdownPP project. Terraform Registry \u00b6 The Focus from the Registy Documentation is the Provider self, for example Resources and Datasources . More informations about the Required Format at terraform.io . Development Shortcuts \u00b6 build and test in one command make compile \\ && make install \\ && bats scripts/test/bats/build terraform import -var harbor_endpoint=${HARBOR_ENDPOINT} -var harbor_base_path='/api' harbor_project.main 24 Links \u00b6 writing-custom-providers","title":"Development"},{"location":"guides/development/#development","text":"","title":"Development"},{"location":"guides/development/#visual-studio-code-devcontainer","text":"For Easy development use Visual Studio Code DevContainer , you can find the basement from the Development Containers at nolte/vscode-devcontainers .","title":"Visual Studio Code DevContainer"},{"location":"guides/development/#precondition-for-use","text":"Create you Github Personal Access Token under github.com/settings/tokens with the following scopes: read:packages Login to fetch the required dev containers docker login docker.pkg.github.com Grab you a Coffee and wait for 3 Minutes (This happens on the first time use) Click Terminal -> New Terminal and execute the following command: make","title":"Precondition for Use"},{"location":"guides/development/#process","text":"branch description master The master will only used for Presentation, and the Deployment process. tags/v* All Created Releases must be start with a v* prefix at the tag name. gh-pages Branch for the Static HTML presentation, generated by the GitHub Release Workflow. develop Branch for the current development, this branch will be used for integrate new Features, and starting the release flow. feature/* This are temporary branches for develop new functions. fix/* Used for bugfixing from existing versions, if no FastForward Fix Possible. Please use the develop branch for new features and fixes.","title":"Process"},{"location":"guides/development/#releasing","text":"The Github Release Assets will be automatic attach from the build job see .github/workflows/gorelease.yaml . The Release Process use goreleaser for create the the Binaries. Each Release will be start, at the moment , from the develop branch. The release description will be generated by release-drafter/release-drafter in a seperated workflow. Look to .github/workflows/release-drafter.yml for the Job, and .github/release-drafter.yml for the description configuration.","title":"Releasing"},{"location":"guides/development/#build","text":"The Build scripted at the moment splitted into the GitHub Workflow Stuff and a combination of Makefiles and Shell Scripts, an Targets from the nolte/plumbing . The Makefile/Magefile should be use for the local development, permanten using the full GitHub Workflows needs a lot of time. You will get the compleat list of possible Magefile Targets with: cd ./tools && go run mage.go -l","title":"Build"},{"location":"guides/development/#cicd","text":"For local usage the GitHub Actions we use the nektos/act Project. The first local execute will be take some time for pulling the large nektos/act-environments-ubuntu:18.04 image. Workflow Job Job Local Description build \ud83d\udc4d This is the Classic Build job with Static Tests, and compile the provider. releaseBuild \ud83d\udc4e This Job are used for attatch Release Assets to a existing GHRelease acc \ud83d\udc4e Starting a full run of Terraform Integration Tests, with starting a local kind cluster and deploy a v2 Harbor. shellcheck-check \ud83d\udc4d Check the Schell scripts for problems. devcontainers-check , docscontainers-check \ud83d\udc4e Simple build job for the both Dev Containers (VSCode and mkdocs) # call job act -j <job> -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 # example calling the build workflow act -j build -P ubuntu-latest = nektos/act-environments-ubuntu:18.04 Since the Acception Tests Workflow is a matrix build, for better Tests again different Harbor Versions. It is not possible to run it locally, because the you can`t start two or more Kind Cluster out of the box locally. Feature Request #114 for call a specific Matrix Workflow.","title":"CI/CD"},{"location":"guides/development/#harborapi-client","text":"At the moment the Swagger Json for generate the Api Client, look ./docs/adr/0001-use-swagger-for-generate-http-client.md . For manipulate the Swagger Json, and generating a useable go api client, we use evanphx/json-patch inside the buildprocess, for adding or replace different JSonStructures. So if you need new manipulations, change the scripts/swagger-specs/patch.1.json patch file. More informations about jsonpatch . The problem are tracked, #12474 .","title":"HarborAPI Client"},{"location":"guides/development/#docs","text":"The Documentation are presented in Different Formats, as GitHub Page , and for the registry.terraform.io .","title":"Docs"},{"location":"guides/development/#github-page","text":"If you use the VSCode DevContainer , the mkdocs container will be started automatical, as a sidecar container. At the Development you ca access the current state from the Documentation at 127.0.0.1:8000 . For some extras, like Tasks List or Snippeds we use the MarkdownPP project.","title":"GitHub Page"},{"location":"guides/development/#terraform-registry","text":"The Focus from the Registy Documentation is the Provider self, for example Resources and Datasources . More informations about the Required Format at terraform.io .","title":"Terraform Registry"},{"location":"guides/development/#development-shortcuts","text":"build and test in one command make compile \\ && make install \\ && bats scripts/test/bats/build terraform import -var harbor_endpoint=${HARBOR_ENDPOINT} -var harbor_base_path='/api' harbor_project.main 24","title":"Development Shortcuts"},{"location":"guides/development/#links","text":"writing-custom-providers","title":"Links"},{"location":"guides/kind/","text":"E2E Tests With Kind \u00b6 For Quick and Easy Local Development it is Recommended to use a Vanilla Harbor installation. The Local Test environment will be used the Helm Chart from goharbor/harbor-helm . All relevant Makefile goals are prefixed with e2s_* . Goal Description e2e_prepare Configure the Kind based Env, and install the latest version from the Harbor Chart. e2e_prepare_harbor_v1 Install a Harbor v1 to the Kind Cluster e2e_prepare_harbor_v2 Install a Harbor v2 to the Kind Cluster e2e_test_v1 Starting the go based tests again a Harbor V1 Deployment e2e_test_v2 Starting the go based tests again a Harbor V2 Deployment e2e_test_classic Test the Terraform Scripts from examples with terratest e2e_clean_harbor Delete the Harbor helm chart from kind cluster e2e_clean_cluster Remove the current kind cluster. The same flavore of tests will be integrated into the CI/CD Process. Befor you execute e2e_prepare ensure that the INGRESS_DOMAIN to your local host (By default we use the Docker Bridge Network Interface like 172-17-0-1.sslip.io .) example without change any files cd ./tools && go run mage.go -v kind:recreate ./scripts/tst-01-prepare-harbor.sh \"10-42-0-100.sslip.io\" \"1.2.0\" As wildcard DNS we use a service like sslip.io . The scripts will be starting the Kind Cluster with Ingress Support , as Ingress Controller we use Nginx . The Kind installation is part of the used Visual Studio Code Devcontainer Go Based Tests \u00b6 For quick response and tests near the Code we use Terrafomr Go Acceptance Tests . make e2e_test Tests will be matchs by the file name prefix *_test.go . Terratest File Based Tests \u00b6 The Classic Terraform File based tests are located at examples/** , and executed with terratest . For execution you need, a full runnable Terraform Enviroment with the current version from the harbor terraform provider. # compile the provider make compile # copy provider to local ~/.terraform.d/plugins/linux_amd64 folder make install # start the tests make e2e_test_classic","title":"Local E2E Tests"},{"location":"guides/kind/#e2e-tests-with-kind","text":"For Quick and Easy Local Development it is Recommended to use a Vanilla Harbor installation. The Local Test environment will be used the Helm Chart from goharbor/harbor-helm . All relevant Makefile goals are prefixed with e2s_* . Goal Description e2e_prepare Configure the Kind based Env, and install the latest version from the Harbor Chart. e2e_prepare_harbor_v1 Install a Harbor v1 to the Kind Cluster e2e_prepare_harbor_v2 Install a Harbor v2 to the Kind Cluster e2e_test_v1 Starting the go based tests again a Harbor V1 Deployment e2e_test_v2 Starting the go based tests again a Harbor V2 Deployment e2e_test_classic Test the Terraform Scripts from examples with terratest e2e_clean_harbor Delete the Harbor helm chart from kind cluster e2e_clean_cluster Remove the current kind cluster. The same flavore of tests will be integrated into the CI/CD Process. Befor you execute e2e_prepare ensure that the INGRESS_DOMAIN to your local host (By default we use the Docker Bridge Network Interface like 172-17-0-1.sslip.io .) example without change any files cd ./tools && go run mage.go -v kind:recreate ./scripts/tst-01-prepare-harbor.sh \"10-42-0-100.sslip.io\" \"1.2.0\" As wildcard DNS we use a service like sslip.io . The scripts will be starting the Kind Cluster with Ingress Support , as Ingress Controller we use Nginx . The Kind installation is part of the used Visual Studio Code Devcontainer","title":"E2E Tests With Kind"},{"location":"guides/kind/#go-based-tests","text":"For quick response and tests near the Code we use Terrafomr Go Acceptance Tests . make e2e_test Tests will be matchs by the file name prefix *_test.go .","title":"Go Based Tests"},{"location":"guides/kind/#terratest-file-based-tests","text":"The Classic Terraform File based tests are located at examples/** , and executed with terratest . For execution you need, a full runnable Terraform Enviroment with the current version from the harbor terraform provider. # compile the provider make compile # copy provider to local ~/.terraform.d/plugins/linux_amd64 folder make install # start the tests make e2e_test_classic","title":"Terratest File Based Tests"}]}